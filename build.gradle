buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
//    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10' //querydsl double compile error 발생함
    //SonarCloud
    id 'org.sonarqube' version "5.0.0.4638"
    //SonarCloud test coverage
    id "jacoco"
}

group = 'com.project'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
    //default SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //DB Connect And Logging
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.8'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //lombok
    implementation 'org.projectlombok:lombok:1.18.22'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //test
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    //bsm-oauth-java
    implementation 'com.github.leehj050211:bsm-oauth-java:1.0.0'
    //string diff
    implementation 'org.bitbucket.cowwoc:diff-match-patch:1.2'
    //mac issue 해결
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'


    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0" // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

    //aws s3
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.638'
}

tasks.named('test') {
    useJUnitPlatform()
}


//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}
sourceSets {
    main.java.srcDirs += [querydslDir]
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

clean {
    delete file(querydslDir)
}

//spring6부터 추가된 경고문구 해결
configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
}

//sonarCloud
sonarqube {
    properties {
        property "sonar.projectKey", "Team-INSERT_BUMAWIKI_SERVER_V2"
        property "sonar.organization", "team-insert"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacoco {
    toolVersion = '0.8.12'
}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

//sonarCloud testCoverage
jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }

    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "com.project.bumawiki.BumawikiApplication",
                            "**.*Config*",
                            "**.*Exception*",
                            "**.*Dto*"
                    ] + QDomains)
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification
}

//jacocoTestCoverageVerification {
//    def QDomains = []
//
//    for (qPattern in '*.QA'..'*.QZ') {
//        QDomains.add(qPattern + '*')
//    }
//
//    violationRules {
//        rule {
//            enabled = true
//
//            element = 'CLASS'
//
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.80
//            }
//
//            excludes = [
//                    "com.project.bumawiki.BumawikiApplication",
//                    "**.*Config*",
//                    "**.*Exception*",
//                    "**.*Dto*"
//            ] + QDomains
//        }
//    }
//}
//plain jar 비활성화
jar {
    enabled = false
}


